==============GUIA DE DESENVOLVIMENTO PROJETO===================

=====================================================================================
1°-> Realizar o Dowloand das ferramentas para preparar o ambiente de desenvolvimento
. Banco de Dados: PostgreSQL
.IDE: IntelliJe
. Java na versão: 11 Adiante Adopten JDK
.Versionamento: GitDesktop login com github
.GIT: Instalar o GIT no computador
=====================================================================================

=====================================================================================

2º-> Entender qual é a proposta do projeto, ou seja, nos conceituar dentro das possibilidades.

=====================================================================================


=====================================================================================

3°-> Inicializar nosso projeto no Spring Initialzr
. Java 11
. Estrutura Mavem Project

=====================================================================================

=====================================================================================
4º-> Criar nosso pacote Model de acordo com Diagrama e Mapear
. Criar nossas classes de modelo
. Gerar os Gatters and Setters

=====================================================================================

=====================================================================================
5º-> Realizar a instalação dos Plugins Spring Boot Tools e JPA BUDY
. Utilizar alt+insert para adicionar os Starts usando Spring Boot Assistent
. Adicionar as depências Spring Boot data JPA
.Adicionar as depêndencias PostgreSQL

=====================================================================================

=====================================================================================
6º-> Criar os mapeamentos nas classes do pacote Model de acordo com a regra de negócio DIAGRAMA CLASSE
. Mapenar as classes de acordo com grau de importância
.Analisar as Anotações no projeto e necessidades para mapear no banco de dados.

=====================================================================================

7º-> Adicionar a dependência Swagger org.springdoc
. Essa biblioteca ajuda autotizar a geração de documenta da API usando projetos de inciialização de Spring.
Funciona examinando um aplicativo em tempo de execução para inferir semântica de API com base
em configurações de Spring. Estrutura de Classes e várias anotações. springdoc-openapi
  <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-ui</artifactId>
      <version>1.6.8</version>
   </dependency>
=====================================================================================

=====================================================================================

8°-> Criar nosso pacote Repositorio (Repository)
. Quando falamos de qualquer ação que queremos fazer com nossa aplicação, a mesma precisa ter interação com
nosso Banco de Dados.
. Como é que vamos determinar alguém para realizar operações em um correntista ou movimentação.
.Quando falamos em JPA e Spring Boot Data JPA existe um mecanismo chamado de Repositórios que o proprio
framework dispinibiliza pra gente.

=====================================================================================

9º->Criando as Interfaces dentro do pacote repositorios
-->Então ao criarmos, precisamos criar em vez de Class. Precisamos criar Interfaces

. Primeiro precisamos criar um "cara" Movimentação
. Primeiro  também precisamos criar um "cara" correntista

.Segundo Criar Interface CorrentistaRepository
.Segundo Criar Interface MovimentacaoRepository

=====================================================================================

10º-> Configurando as Classes de Interface com Extends
. A classe CorrentistaRepository precisa entender que ela vai extender do Framework através de
uma outroa interface e precisamos determinar a classe dentro dessa interface JPA que estaremos
trabalhando com a Classe Correntista:
.Interface extendida: JpaRepository do próprio framework

public interface CorrentistaRepository extends JpaRepository<Correntista, Integer>{

}

. A classe Movimentacao Repository precisa entender que ela vai extender também uma outra
interface através de uma outra iterface e precisamos determinar a classe dentro dessa
interface JPA na qual nós iremos trablhar.

.Interface extendida: JpaRepository do próprio framework

public interface MovimentacaoRepository extends JpaRepository<Movimentacao, Integer>{

}
=====================================================================================

11º-> Feito isso nós precisamos subir a nossa aplicação para que o usuário consiga acessar
e finalmente consumir nossa API.
. Seguindo o padrão SpringMVC nós temos uma camada de Controllers que é a parte que diz:
A partir de agora podemos disponibilizar rotas e as pessoas interagirem na minha aplicação

--> Criar um pacote de Controllers
São essas classes controllers que  saberão tudo sobre nosso webservice para gerar os recursos
para trabalharmos com o correntista: Criar correntista, atualizar, deletar.

. Primeiro criar uma classe CorrentistaController dentro do pacote Controller:

. Com isso saberemos que nossa aplicação PRECISARÁ SER WEB A PARTIR DE AGORA.

=====================================================================================

=====================================================================================
12º-> Precisamos adicionar a dependência Spring Web para nossa aplicação se torna Web.
=====================================================================================

=====================================================================================
13º-> Configura as Classes Controllers e Mapeamento
. Mapear a classe CorrentistaController dizendo que:
 Agora a classe será @RestControllers
 Agora a classe será @RequestMapping("/correntistas")

.Ela vai tentar realizar operações referentes ao nosso banco de dados

. Criar um metodo na classe CorrentistaController para Listar
. A nossa classe CorrentistaController não tem por si só permissão para acessar BD
para isso ele precisa pedir a nossa classe CorrentistaRepository que é o cara que
consegue buscar informações ao Banco.

. Usar anotação @Autowired para trazer repositorio sem dar New

. /*Criando Metodo para listar correntistas*/
     @Autowired
       private CorrentistaRepository repository;

     @GetMapping /*Dizemos que nosso metodo é uma requisição do endpoint ("/correntistas")*/
        public List<Correntista> findAll(){
            return repository.findAll();

        }


=====================================================================================

=====================================================================================

14º-> Criar um insert em nosso banco de dados manual para testar se nossa aplicação está realizando a consulta
. Ir em tab_correntista > Botão direito > Scripts > CREATE INSERT > Mudar campos do Script > Select * From tab_correntistas;
.Run na Aplicação

=====================================================================================

15º -> Agora precisamos que a nossa aplicação pegue os dados e salve no Banco de Dados

. Classe CorrentistaController:
Criar um metodo na classe para que nossa aplicação capture os dados e faça persistências no Banco de Dados

.RequestBody para que essa requisiçao faça para do corpo da requisição

@PostMapping anotação que vai receber via Post um correntista atraves do paramentro do metodo

public void save (@RequestBody Correntista correntista){

}

=====================================================================================
16º-> Criando o pacote DTO
.  Como nosso correntista ele tem somente as informações de CPF e nome
e a conta, nós iremos fazer a seguinte analogia:
Simulando que a Conta vai existir no cadastro de um correntista e não o correntista vai dizer
o número da sua conta e seu saldo, nós precisamos simular que vamos receber um "carinha"
que a gente denomina como uma camada de interação entre nossos usuários

.DT0>NovoCorrentista

.Para que eu possa cadastrar um novo correntista eu irei precisar de Nome, CPF
e por isso precisamos criar as variaveis dentro de NovoCorrentista

 private String nome;
 private String cpf;
 . Gerar os getters and Setters

 . Infelizmente não podemos trabalhar com a nossa regra de negócio na nossa classe CorrentistaRepository
 por ela ser do tipo INTERFACE.
 .Por isso criaremos nossa camada de Services
=====================================================================================

=====================================================================================
17º-> Criar o pacote Service

.Criar a classe CorrentistaService

. Mapear essa classe com anotação @Service que dizemos que ela será do tipo serviço
 @Autowired
    private CorrentistaRepository repository;

    public void  save (NovoCorrentista novoCorrentista){
        Correntista correntista = new Correntista();
        correntista.setCpf(novoCorrentista.getCpf());
        correntista.setNome(novoCorrentista.getNome());

        Conta conta = new Conta();
        conta.setSaldo(0.0); /*Todo novo correntista tera o inicio da conta 0.0*/
        conta.setNumero(new Date().getTime()); /*Digo que vai gerar numero da nossa conta*/

        correntista.setConta(correntista);
=====================================================================================

=====================================================================================
18º->Swagger Documentar toda nossa API para interagir e criar testes da nossas funcionalidades

. Ir no google e pesquisar Swagger 3 Spring Boot
. Implementar a depêdencia nova em nosso pom.xml


=====================================================================================